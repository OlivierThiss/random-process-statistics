#include <pic18.h>
#include "lcd_portd.c"
#include <math.h>

const unsigned char MSG0[25] = "Luminosity Value:";
unsigned char TABLE[4] = {1, 2, 4, 8};
int STEP, N, TIME, CELSIUS, i, x;
unsigned int A2D, N0;

//A2D function
unsigned int A2D_Read(unsigned char c)
{
	unsigned int result;
	unsigned char i;
	c = c & 0x0F;
	ADCON0 = (c << 2) + 0x01;
	for (i=0; i<20; i++)
	GODONE = 1;
	while(GODONE);
	return(ADRES);

}

//function that sends data back to the terminal
void SCI_Out( int DATA, unsigned char N)
{
   unsigned char A[5], i;
   if (DATA < 0) { while(!TRMT);  TXREG = '-';  DATA = -DATA; }


   for (i=0; i<5; i++) {
      A[i] = DATA % 10;
      DATA = DATA / 10;
      }
   for (i=5; i>0; i--) {
      if (i == N) {
         while(!TRMT);  TXREG = '.';
         }   
      while(!TRMT);  TXREG = A[i-1] + 48;
   }
   while(!TRMT);  TXREG = ' ';
   }

//start of the inerrupts
void interrupt IntServe(void) 
{

//checks to see if timer 1 interrupt has been activated
if (TMR1IF) {

//sets the timing for how often the stepper motar function will be called, 65,000 is the largest number it can be so it will be called as often as possible
	TMR1 = -65000;  
	
//moves the stepper motar forward as long as RB7 is held
	  if(RB7){
	  STEP = STEP + 1;
      PORTC = TABLE[STEP % 4];

// turns off the interrupt
      TMR1IF = 0;   		
}		
//moves the stepper motar forward as long as RB7 is held 
	if(RB6){

	  STEP = STEP - 1;
      PORTC = TABLE[STEP % 4];      
      TMR1IF = 0;
	  		
}	
}

//checks to see if timer 3 interrupt has been activated
if (TMR3IF) {
	TMR3 = -N0;
	RC7 = !RC7;
	TMR3IF = 0;
}

//timer zero interrupt
if(TMR0IF){

		TMR0 = -65000;
			
			//Reads the analog input 
			A2D = A2D_Read(0);

        	CELSIUS = A2D;

			//formula to convert the voltage reading to the corisponding tempature 
		    CELSIUS = (39300./ ( log( A2D / (1023. - A2D) ) + 13.1879 ) - 2730);

			LCD_Move(1,0);  LCD_Out(CELSIUS,0);

		//sends the data to the terminal/computure
		SCI_Out(CELSIUS, 0);
		
		while(!TRMT); TXREG = 13;
		while(!TRMT); TXREG = 10;

}		
		TMR0IF = 0;
} 
     

void main(void)
{
	 float A2D;
	 float CELSIUS;
	 int i;
	unsigned int X;

//initalizing the inputs	
   TRISA = 0xFF;
   TRISB = 0xFF;
   TRISC = 0;
   TRISD = 0;
   TRISE = 0;
   ADCON1 = 0x0F;



   TRISA = 0xFF;
   TRISE = 0x0F;
   ADCON2 = 0x95;
   ADCON1 = 0x07;
   ADCON0 = 0x07;

//initalize 
	TRISC = TRISC | 0xC0;
	TXIE = 0;
	RCIE = 0;
	BRGH = 0;
	BRG16 = 1;
	SYNC = 0;
	SPBRG = 255;
	TXSTA = 0x22;
	RCSTA = 0x90;

	LCD_Init();                 
    TRISD0 = 0;

// set up Timer0 for PS = 1
	T0CS = 0;
	T0CON = 0x87;
	TMR0ON = 1;
	TMR0IE = 1;
	TMR0IP = 1;
	PEIE = 1;

//  set up Timer1 for PS = 1
   TMR1CS = 0;
   T1CON = 0xB1;
   TMR1ON = 1;
   TMR1IE = 1;
   TMR1IP = 1;
   PEIE = 1;



//set up Timer2 for PS = 1
   TMR3CS = 0;
   T3CON = 0x81;
   TMR3ON = 1;
   TMR3IE = 1;
   TMR3IP = 1;
   PEIE = 1;


	
// turn on all interrupts
   GIE = 1;

   STEP = 0;

while(1) {
	//displays the tempature reading and position of the stepper motar on the LCD
	LCD_Move(0,0); LCD_Out(CELSIUS, 0);
	LCD_Move(1,7); LCD_Out(STEP*10, 0);


}
}
